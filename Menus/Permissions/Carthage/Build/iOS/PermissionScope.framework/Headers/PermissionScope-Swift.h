// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreLocation;
@import CoreBluetooth;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum PermissionType : NSInteger;


/// <ul><li>Protocol for permission configurations.</li></ul>
SWIFT_PROTOCOL("_TtP15PermissionScope10Permission_")
@protocol Permission

/// Permission type
@property (nonatomic, readonly) enum PermissionType type;
@end


SWIFT_CLASS("_TtC15PermissionScope19BluetoothPermission")
@interface BluetoothPermission : NSObject <Permission>
@property (nonatomic, readonly) enum PermissionType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15PermissionScope16CameraPermission")
@interface CameraPermission : NSObject <Permission>
@property (nonatomic, readonly) enum PermissionType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15PermissionScope18ContactsPermission")
@interface ContactsPermission : NSObject <Permission>
@property (nonatomic, readonly) enum PermissionType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15PermissionScope16EventsPermission")
@interface EventsPermission : NSObject <Permission>
@property (nonatomic, readonly) enum PermissionType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15PermissionScope24LocationAlwaysPermission")
@interface LocationAlwaysPermission : NSObject <Permission>
@property (nonatomic, readonly) enum PermissionType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15PermissionScope28LocationWhileInUsePermission")
@interface LocationWhileInUsePermission : NSObject <Permission>
@property (nonatomic, readonly) enum PermissionType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15PermissionScope20MicrophonePermission")
@interface MicrophonePermission : NSObject <Permission>
@property (nonatomic, readonly) enum PermissionType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15PermissionScope16MotionPermission")
@interface MotionPermission : NSObject <Permission>
@property (nonatomic, readonly) enum PermissionType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIUserNotificationCategory;

SWIFT_CLASS("_TtC15PermissionScope23NotificationsPermission")
@interface NotificationsPermission : NSObject <Permission>
@property (nonatomic, readonly) enum PermissionType type;
@property (nonatomic, readonly, copy) NSSet<UIUserNotificationCategory *> * __nullable notificationCategories;
- (nonnull instancetype)initWithNotificationCategories:(NSSet<UIUserNotificationCategory *> * __nullable)notificationCategories OBJC_DESIGNATED_INITIALIZER;
@end


enum PermissionStatus : NSInteger;


/// Result for a permission status request.
SWIFT_CLASS("_TtC15PermissionScope16PermissionResult")
@interface PermissionResult : NSObject
@property (nonatomic, readonly) enum PermissionType type;
@property (nonatomic, readonly) enum PermissionStatus status;
@property (nonatomic, readonly, copy) NSString * __nonnull description;
@end

@class UILabel;
@class UIColor;
@class UIFont;
@class UIButton;
@class UIView;
@class NSCoder;
@class NSBundle;
@class UIGestureRecognizer;
@class UITouch;
@class CLLocationManager;
@class CBPeripheralManager;

SWIFT_CLASS("_TtC15PermissionScope15PermissionScope")
@interface PermissionScope : UIViewController <CLLocationManagerDelegate, CBPeripheralManagerDelegate, UIGestureRecognizerDelegate>

/// Header UILabel with the message "Hey, listen!" by default.
@property (nonatomic, readonly, strong) UILabel * __nonnull headerLabel;

/// Header UILabel with the message "We need a couple things\r\nbefore you get started." by default.
@property (nonatomic, readonly, strong) UILabel * __nonnull bodyLabel;

/// Color for the close button's text color.
@property (nonatomic, strong) UIColor * __nonnull closeButtonTextColor;

/// Color for the permission buttons' text color.
@property (nonatomic, strong) UIColor * __nonnull permissionButtonTextColor;

/// Color for the permission buttons' border color.
@property (nonatomic, strong) UIColor * __nonnull permissionButtonBorderColor;

/// Width for the permission buttons.
@property (nonatomic) CGFloat permissionButtonÎ’orderWidth;

/// Corner radius for the permission buttons.
@property (nonatomic) CGFloat permissionButtonCornerRadius;

/// Color for the permission labels' text color.
@property (nonatomic, strong) UIColor * __nonnull permissionLabelColor;

/// Font used for all the UIButtons
@property (nonatomic, strong) UIFont * __nonnull buttonFont;

/// Font used for all the UILabels
@property (nonatomic, strong) UIFont * __nonnull labelFont;

/// Close button. By default in the top right corner.
@property (nonatomic, strong) UIButton * __nonnull closeButton;

/// Offset used to position the Close button.
@property (nonatomic) CGSize closeOffset;

/// Color used for permission buttons with authorized status
@property (nonatomic, strong) UIColor * __nonnull authorizedButtonColor;

/// Color used for permission buttons with unauthorized status. By default, inverse of authorizedButtonColor.
@property (nonatomic, strong) UIColor * __nullable unauthorizedButtonColor;
@property (nonatomic, readonly, strong) UIView * __nonnull contentView;

/// Callback called when permissions status change.
@property (nonatomic, copy) void (^ __nullable onAuthChange)(BOOL, NSArray<PermissionResult *> * __nonnull);

/// Callback called when the user taps on the close button.
@property (nonatomic, copy) void (^ __nullable onCancel)(NSArray<PermissionResult *> * __nonnull);

/// Called when the user has disabled or denied access to notifications, and we're presenting them with a help dialog.
@property (nonatomic, copy) void (^ __nullable onDisabledOrDenied)(NSArray<PermissionResult *> * __nonnull);

/// View controller to be used when presenting alerts. Defaults to self. You'll want to set this if you are calling the request* methods directly.
@property (nonatomic, strong) UIViewController * __nullable viewControllerForAlerts;

/// Designated initializer.
///
/// \param backgroundTapCancels True if a tap on the background should trigger the dialog dismissal.
- (nonnull instancetype)initWithBackgroundTapCancels:(BOOL)backgroundTapCancels OBJC_DESIGNATED_INITIALIZER;

/// Convenience initializer. Same as init(backgroundTapCancels: true)
- (nonnull instancetype)init;
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * __nullable)nibNameOrNil bundle:(NSBundle * __nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillLayoutSubviews;

/// Adds a permission configuration to PermissionScope.
///
/// \param config Configuration for a specific permission.
///
/// \param message Body label's text on the presented dialog when requesting access.
- (void)addPermission:(id <Permission> __nonnull)permission message:(NSString * __nonnull)message;

/// Returns the current permission status for accessing LocationAlways.
///
/// \returns  Permission status for the requested type.
- (enum PermissionStatus)statusLocationAlways;

/// Requests access to LocationAlways, if necessary.
- (void)requestLocationAlways;

/// Returns the current permission status for accessing LocationWhileInUse.
///
/// \returns  Permission status for the requested type.
- (enum PermissionStatus)statusLocationInUse;

/// Requests access to LocationWhileInUse, if necessary.
- (void)requestLocationInUse;

/// Returns the current permission status for accessing Contacts.
///
/// \returns  Permission status for the requested type.
- (enum PermissionStatus)statusContacts;

/// Requests access to Contacts, if necessary.
- (void)requestContacts;

/// Returns the current permission status for accessing Notifications.
///
/// \returns  Permission status for the requested type.
- (enum PermissionStatus)statusNotifications;

/// Requests access to User Notifications, if necessary.
- (void)requestNotifications;

/// Returns the current permission status for accessing the Microphone.
///
/// \returns  Permission status for the requested type.
- (enum PermissionStatus)statusMicrophone;

/// Requests access to the Microphone, if necessary.
- (void)requestMicrophone;

/// Returns the current permission status for accessing the Camera.
///
/// \returns  Permission status for the requested type.
- (enum PermissionStatus)statusCamera;

/// Requests access to the Camera, if necessary.
- (void)requestCamera;

/// Returns the current permission status for accessing Photos.
///
/// \returns  Permission status for the requested type.
- (enum PermissionStatus)statusPhotos;

/// Requests access to Photos, if necessary.
- (void)requestPhotos;

/// Returns the current permission status for accessing Reminders.
///
/// \returns  Permission status for the requested type.
- (enum PermissionStatus)statusReminders;

/// Requests access to Reminders, if necessary.
- (void)requestReminders;

/// Returns the current permission status for accessing Events.
///
/// \returns  Permission status for the requested type.
- (enum PermissionStatus)statusEvents;

/// Requests access to Events, if necessary.
- (void)requestEvents;

/// Returns the current permission status for accessing Bluetooth.
///
/// \returns  Permission status for the requested type.
- (enum PermissionStatus)statusBluetooth;

/// Requests access to Bluetooth, if necessary.
- (void)requestBluetooth;

/// Returns the current permission status for accessing Core Motion Activity.
///
/// \returns  Permission status for the requested type.
- (enum PermissionStatus)statusMotion;

/// Requests access to Core Motion Activity, if necessary.
- (void)requestMotion;

/// Shows the modal viewcontroller for requesting access to the configured permissions and sets up the closures on it.
///
/// \param authChange Called when a status is detected on any of the permissions.
///
/// \param cancelled Called when the user taps the Close button.
- (void)show:(void (^ __nullable)(BOOL, NSArray<PermissionResult *> * __nonnull))authChange cancelled:(void (^ __nullable)(NSArray<PermissionResult *> * __nonnull))cancelled;

/// Hides the modal viewcontroller with an animation.
- (void)hide;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * __nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * __nonnull)touch;
- (void)locationManager:(CLLocationManager * __nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
- (void)peripheralManagerDidUpdateState:(CBPeripheralManager * __nonnull)peripheral;
@end


/// Possible statuses for a permission.
typedef SWIFT_ENUM(NSInteger, PermissionStatus) {
  PermissionStatusAuthorized = 0,
  PermissionStatusUnauthorized = 1,
  PermissionStatusUnknown = 2,
  PermissionStatusDisabled = 3,
};


/// Permissions currently supportes by PermissionScope
typedef SWIFT_ENUM(NSInteger, PermissionType) {
  PermissionTypeContacts = 0,
  PermissionTypeLocationAlways = 1,
  PermissionTypeLocationInUse = 2,
  PermissionTypeNotifications = 3,
  PermissionTypeMicrophone = 4,
  PermissionTypeCamera = 5,
  PermissionTypePhotos = 6,
  PermissionTypeReminders = 7,
  PermissionTypeEvents = 8,
  PermissionTypeBluetooth = 9,
  PermissionTypeMotion = 10,
};


SWIFT_CLASS("_TtC15PermissionScope16PhotosPermission")
@interface PhotosPermission : NSObject <Permission>
@property (nonatomic, readonly) enum PermissionType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15PermissionScope19RemindersPermission")
@interface RemindersPermission : NSObject <Permission>
@property (nonatomic, readonly) enum PermissionType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIColor (SWIFT_EXTENSION(PermissionScope))
@end

#pragma clang diagnostic pop
